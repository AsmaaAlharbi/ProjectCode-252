/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package MainGUI;

/**
 *
 * @author asmaabdullah
 */
import java.util.ArrayList;
import java.util.Scanner;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import javax.swing.JOptionPane;

// Factory
import Factory.EventFactory;
import Factory.Event;

// Bridge
import Bridge.Sunday;
import Bridge.Monday;
import Bridge.Tuesday;
import Bridge.Wednesday;
import Bridge.Thursday;
import Bridge.Friday;
import Bridge.Saturday;

// Strategy
import Strategy.StrategyContext;
import Strategy.Payment_Strategy;
import Strategy.ApplePay;
import Strategy.CreditCard;
import Strategy.Visa;

// Decorator
import Decorator.Ticket;
import Decorator.RegularTicket;
import Decorator.FastPassTicketDecorator;

public class GUI_Main extends javax.swing.JFrame {

    /**
     * Creates new form GUI_252
     */
    static final int BPrice = 20, PPrice = 15, DPrice = 25, GPrice = 30, SPrice = 30;
    public static int BQua = 0, PQua = 0, DQua = 0, SQua = 0, GQua = 0, total = 0;
    public static int B = 12, P = 20, Da = 5, S = 20, G = 25;
    public static String invoice = "";
    public static Scanner input = new Scanner(System.in);

    public GUI_Main() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel7 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("STLA World Application");
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel7.setFont(new java.awt.Font("Telugu MN", 0, 14)); // NOI18N
        jLabel7.setText("Please click here to start the app");
        getContentPane().add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 300, -1, -1));

        jButton1.setFont(new java.awt.Font("Telugu MN", 0, 18)); // NOI18N
        jButton1.setText("Start ");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 330, 160, 40));

        jLabel2.setFont(new java.awt.Font("Telugu MN", 0, 18)); // NOI18N
        jLabel2.setText("The perfect application to book \nyour tickets without waiting!");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 220, 530, 40));

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/MainGUI/STLA World.png"))); // NOI18N
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 670, 440));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        start();
        JOptionPane.showMessageDialog(null, invoice);

    }//GEN-LAST:event_jButton1ActionPerformed

    public void start() {

        boolean flag = true;
        Scanner in = new Scanner(System.in);
        while (flag) {

            System.out.print(displayWelcomeMessage());

            System.out.print("Enter your selection: ");
            String select = input.next().toUpperCase();

            if (select.equalsIgnoreCase("E")) {
                if (BQua == 0 && PQua == 0 && SQua == 0 && GQua == 0 && DQua == 0) {
                    System.out.println("Nothing Selected. See you again.");
                    System.exit(0);
                }
                flag = false;
            } else {
                selectEvent(select);
            }

        }

        System.out.print("Enter your name: ");
        String userName = input.next();

        System.out.print("");
        String mobileNum = "";

        while (!isCorrectMobile(mobileNum)) {
            System.out.print("Enter your Mobile Number (must start with 05): ");
            mobileNum = input.next();
        }

        System.out.println("");

        boolean hasFastPass = FastPass();

        Payment();

        System.out.println("");

        System.out.println("\nThe invoice will appear in new window ....");

        invoice += (invoice(userName, hasFastPass));

    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GUI_Main().setVisible(true);
            }
        });
    }

    public static void calculatePrice(boolean hasFastPass) {
        int itemTotal;
        itemTotal = BQua * BPrice;
        total += itemTotal;
        itemTotal = PQua * PPrice;
        total += itemTotal;
        itemTotal = SQua * SPrice;
        total += itemTotal;
        itemTotal = GQua * GPrice;
        total += itemTotal;
        itemTotal = DQua * DPrice;
        total += itemTotal;

        // Adding Fast Pass Ticket feature
        if (hasFastPass) {
            total += 20; // Add 20 SR for the Fast Pass Ticket
        }
    }

    public static String displayWelcomeMessage() {

        String WelcomeMsg = "";

        WelcomeMsg += "----------------------------------------------------------\n";
        WelcomeMsg += "\t\tWelcome to STLA World\n";
        WelcomeMsg += "----------------------------------------------------------\n";

        WelcomeMsg += "B: Bumper cars          20SR          " + B + " Tickets left\n";
        WelcomeMsg += "P: Pirate Ship          15SR          " + P + " Tickets left\n";
        WelcomeMsg += "D: Drop tower           25SR          " + Da + " Tickets left\n";
        WelcomeMsg += "G: Giant Wheel          30SR          " + G + " Tickets left\n";
        WelcomeMsg += "S: Ice skating          30SR          " + S + " Tickets left\n";
        WelcomeMsg += "E: Confirm and Exit\n";

        WelcomeMsg += "----------------------------------------------------------\n";
        return WelcomeMsg;

    }

    public static boolean isCorrectMobile(String mobileNum) {
        return mobileNum.startsWith("05") && mobileNum.length() == 10;
    }

    public static int selectDate() {

        ArrayList<String> dateList = new ArrayList<>();
        dateList.add("18/06/2023  Sunday");
        dateList.add("19/06/2023  Monday");
        dateList.add("20/06/2023  Tuesday");
        dateList.add("21/06/2023  Wednesday");
        dateList.add("22/06/2023  Thursday");
        dateList.add("23/06/2023  Friday");
        dateList.add("24/06/2023  Saturday");

        System.out.println("\nSelect the date of the event:");
        for (int i = 0; i < dateList.size(); i++) {
            System.out.println((i + 1) + ". " + dateList.get(i));
        }

        System.out.print("\nEnter your selection: ");
        int selection = input.nextInt();
        while (selection < 1 || selection > dateList.size()) {
            System.out.println("Invalid selection. Please choose a valid option.");
            selection = input.nextInt();
        }
        return selection;
    }

    public static boolean FastPass() {
        // Prompt the user for Fast Pass Ticket choice using decorator design pattern
        boolean flag = true;
        boolean hasFastPass = false;

        do {
            System.out.print("Do you want to add Fast Pass Ticket? (Y/N): ");
            String fastPassChoice = input.next().toUpperCase();
            if (fastPassChoice.equalsIgnoreCase("Y") || fastPassChoice.equalsIgnoreCase("N")) {
                hasFastPass = fastPassChoice.equals("Y");
                flag = false;
            } else {
                System.out.println("Wrong selection!");
            }

        } while (flag);

        // Decorate the regular ticket with Fast Pass access if chosen
        if (hasFastPass) {
            Ticket regularTicket = new FastPassTicketDecorator(new RegularTicket());
            regularTicket.generateTicket();
        }

        // Calculate the total price
        calculatePrice(hasFastPass);
        return hasFastPass;
    }

    public static void Payment() {

        StrategyContext payment = null;
        boolean flag = true;

        System.out.println("\nPayment Options:");
        System.out.println("1. Apple Pay");
        System.out.println("2. Credit Card");
        System.out.println("3. Visa");
        System.out.print("Choose a payment option: ");
        int option = input.nextInt();

        while (flag) {
            if (option == 1) {
                payment = new StrategyContext(new ApplePay());

            } else if (option == 2) {
                payment = new StrategyContext(new CreditCard());

            } else if (option == 3) {
                payment = new StrategyContext(new Visa());
            }
            //Payment_Strategy payment = paymentFactory.getPay(option);
            if (payment != null) {
                payment.executePayment();
                flag = false;
            } else {
                System.out.println("Wrong selection, please choose a valid option");
                System.out.print("\nChoose a payment option: ");
                option = input.nextInt();
            }
        }

    }

    public static void selectEvent(String select) {
        EventFactory eventFactory = new EventFactory();
        Event event = eventFactory.createEvent(select);
        int quaTemp;

        if (event == null) {
            System.out.println("Wrong selection!");
            return;
        }

        int chooseDay = selectDate();
        switch (chooseDay) {
            case 1:
                event.chosenDay(new Sunday());
                break;
            case 2:
                event.chosenDay(new Monday());
                break;
            case 3:
                event.chosenDay(new Tuesday());
                break;
            case 4:
                event.chosenDay(new Wednesday());
                break;
            case 5:
                event.chosenDay(new Thursday());
                break;
            case 6:
                event.chosenDay(new Friday());
                break;
            case 7:
                event.chosenDay(new Saturday());
                break;
        }
        event.getDay();

        System.out.println("");

        quaTemp = askQuantity();
        event.updateQuantity(quaTemp);

        System.out.println("");

    }

    private static int askQuantity() {
        System.out.print("Quantity: ");
        return input.nextInt();
    }

    public static String invoice(String userName, boolean hasFastPass) {
        String invoicePrint = "";
        invoicePrint += "\n\n****************** INVOICE ********************";
        DateTimeFormatter dtf = DateTimeFormatter.ofPattern("dd/MM/yyyy HH:mm:ss");
        LocalDateTime now = LocalDateTime.now();
        invoicePrint += "\nDate: " + dtf.format(now);
        invoicePrint += "\nBill to: " + userName + "\n";
        invoicePrint += "\nItem                 Quantity          Item Total";

        if (BQua != 0) {
            invoicePrint += "\nBumper cars           " + BQua + "                    " + BQua * BPrice;
        }
        if (PQua != 0) {
            invoicePrint += "\nPirate Ship              " + PQua + "                    " + PQua * PPrice;
        }
        if (SQua != 0) {
            invoicePrint += "\nIce skating             " + SQua + "                    " + SQua * SPrice;
        }
        if (GQua != 0) {
            invoicePrint += "\nGiant Wheel            " + GQua + "                    " + GQua * GPrice;
        }
        if (DQua != 0) {
            invoicePrint += "\nDrop tower             " + DQua + "                    " + DQua * DPrice;
        }

        // Add Fast Pass ticket information if applicable
        if (hasFastPass) {
            invoicePrint += "\nFast Pass Ticket     1                    " + 20;
        }

        invoicePrint += "\n\nTotal: " + total + " SR";
        invoicePrint += "\n****************************************************";
        return invoicePrint;
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel7;
    // End of variables declaration//GEN-END:variables
}
